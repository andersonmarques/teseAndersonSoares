/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package doutorado.tese.gui;

import doutorado.tese.io.ManipuladorArquivo;
import doutorado.tese.util.Coluna;
import doutorado.tese.util.Constantes;
import doutorado.tese.legenda.LegendaVisualizacao;
import doutorado.tese.util.Metadados;
import doutorado.tese.visualizacao.glyph.formasgeometricas.GeometryFactory;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextPane;
import javax.swing.ListModel;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import net.bouthier.treemapAWT.TMView;

/**
 *
 * @author Anderson
 */
public class Main extends javax.swing.JFrame implements PropertyChangeListener {

    private static final Logger logger = LogManager.getLogger(Main.class);

    /**
     * Creates new form Main
     */
    public Main() {

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            logger.info(Main.class.getName());//.log(Level.SEVERE, null, ex);
        }
        initComponents();

        layerPane = new JLayeredPane();
        ArrayList<Object> formasEscolhidosGlyph = getFormaEscolhidasGlyph();
        legendaVisualizacao = new LegendaVisualizacao(painelLegendaVis.getBounds(),formasEscolhidosGlyph);
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        painelEsquerda = new javax.swing.JPanel();
        painelDireita = new javax.swing.JPanel();
        progressoBarra = new javax.swing.JProgressBar();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        botaoGerarVisualizacao = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        colunasHierarquicasList = new javax.swing.JList<>();
        inserirBotao_treemap = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        colunasHierarquicasList2 = new javax.swing.JList<>();
        cimaBotao_treemap = new javax.swing.JButton();
        baixoBotao_treemap = new javax.swing.JButton();
        removerBotao_treemap = new javax.swing.JButton();
        checkLegenda = new javax.swing.JCheckBox();
        legendaComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        tamanhoTreemapComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        corTreemapComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        checkGlyph = new javax.swing.JCheckBox();
        botaoGerarGlyphs = new javax.swing.JButton();
        atributo1Glyph = new javax.swing.JComboBox<>();
        atributo2Glyph = new javax.swing.JComboBox<>();
        atributo3Glyph = new javax.swing.JComboBox<>();
        atributo4Glyph = new javax.swing.JComboBox<>();
        atributo5Glyph = new javax.swing.JComboBox<>();
        atributo7Glyph = new javax.swing.JComboBox<>();
        atributo6Glyph = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        forma2 = new javax.swing.JComboBox<>();
        forma1 = new javax.swing.JComboBox<>();
        forma4 = new javax.swing.JComboBox<>();
        forma3 = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        colunasDetalhesList1 = new javax.swing.JList<>();
        inserirBotao_detalhes = new javax.swing.JButton();
        removerBotao_detalhes = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        colunasDetalhesList2 = new javax.swing.JList<>();
        jLabel12 = new javax.swing.JLabel();
        updateDetailsButton = new javax.swing.JButton();
        legendaBarraRolage = new javax.swing.JScrollPane();
        GridLayout grid = new GridLayout(0, 1);
        painelLegendaVis = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        decisionTreeActivate = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Treemap Glyphs");

        jSplitPane1.setDividerLocation(1000);
        jSplitPane1.setOpaque(false);

        painelEsquerda.setBackground(new java.awt.Color(153, 255, 153));
        painelEsquerda.setOpaque(false);

        javax.swing.GroupLayout painelEsquerdaLayout = new javax.swing.GroupLayout(painelEsquerda);
        painelEsquerda.setLayout(painelEsquerdaLayout);
        painelEsquerdaLayout.setHorizontalGroup(
            painelEsquerdaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 953, Short.MAX_VALUE)
        );
        painelEsquerdaLayout.setVerticalGroup(
            painelEsquerdaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 783, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(painelEsquerda);

        painelDireita.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));

        progressoBarra.setName("teste"); // NOI18N
        progressoBarra.setStringPainted(true);

        botaoGerarVisualizacao.setText("View Treemap");
        botaoGerarVisualizacao.setEnabled(false);
        botaoGerarVisualizacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGerarVisualizacaoActionPerformed(evt);
            }
        });

        jLabel2.setText("Group Hierarchy:");

        colunasHierarquicasList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                colunasHierarquicasListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(colunasHierarquicasList);

        inserirBotao_treemap.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        inserirBotao_treemap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDir.png"))); // NOI18N
        inserirBotao_treemap.setEnabled(false);
        inserirBotao_treemap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirBotao_treemapActionPerformed(evt);
            }
        });

        colunasHierarquicasList2.setEnabled(false);
        colunasHierarquicasList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                colunasHierarquicasList2ValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(colunasHierarquicasList2);

        cimaBotao_treemap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaUp.png"))); // NOI18N
        cimaBotao_treemap.setEnabled(false);
        cimaBotao_treemap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cimaBotao_treemapActionPerformed(evt);
            }
        });

        baixoBotao_treemap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDown.png"))); // NOI18N
        baixoBotao_treemap.setEnabled(false);
        baixoBotao_treemap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baixoBotao_treemapActionPerformed(evt);
            }
        });

        removerBotao_treemap.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        removerBotao_treemap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaEsq.png"))); // NOI18N
        removerBotao_treemap.setEnabled(false);
        removerBotao_treemap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerBotao_treemapActionPerformed(evt);
            }
        });

        checkLegenda.setText("Label:");
        checkLegenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkLegendaActionPerformed(evt);
            }
        });

        legendaComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        legendaComboBox.setToolTipText("");
        legendaComboBox.setEnabled(false);

        jLabel1.setText("Size:");

        tamanhoTreemapComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        tamanhoTreemapComboBox.setEnabled(false);

        jLabel4.setText("Color:");

        corTreemapComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        corTreemapComboBox.setEnabled(false);

        jLabel5.setText("Available Attributes:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(checkLegenda)
                                .addGap(18, 18, 18)
                                .addComponent(legendaComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel4))
                                .addGap(23, 23, 23)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tamanhoTreemapComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(corTreemapComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(74, 74, 74))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inserirBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removerBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cimaBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(baixoBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel2)))
                    .addComponent(botaoGerarVisualizacao, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cimaBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(baixoBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(inserirBotao_treemap, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removerBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(legendaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkLegenda))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tamanhoTreemapComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(corTreemapComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botaoGerarVisualizacao, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(78, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Treemap", jPanel1);

        checkGlyph.setText("Glyph");
        checkGlyph.setEnabled(false);
        checkGlyph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkGlyphActionPerformed(evt);
            }
        });

        botaoGerarGlyphs.setText("View Glyphs");
        botaoGerarGlyphs.setEnabled(false);
        botaoGerarGlyphs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGerarGlyphsActionPerformed(evt);
            }
        });

        atributo1Glyph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        atributo1Glyph.setEnabled(false);
        atributo1Glyph.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                atributo1GlyphItemStateChanged(evt);
            }
        });
        atributo1Glyph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atributo1GlyphActionPerformed(evt);
            }
        });

        atributo2Glyph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        atributo2Glyph.setEnabled(false);
        atributo2Glyph.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                atributo2GlyphItemStateChanged(evt);
            }
        });

        atributo3Glyph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        atributo3Glyph.setEnabled(false);
        atributo3Glyph.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                atributo3GlyphItemStateChanged(evt);
            }
        });
        atributo3Glyph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atributo3GlyphActionPerformed(evt);
            }
        });

        atributo4Glyph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        atributo4Glyph.setEnabled(false);
        atributo4Glyph.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                atributo4GlyphItemStateChanged(evt);
            }
        });
        atributo4Glyph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atributo4GlyphActionPerformed(evt);
            }
        });

        atributo5Glyph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        atributo5Glyph.setEnabled(false);
        atributo5Glyph.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                atributo5GlyphItemStateChanged(evt);
            }
        });
        atributo5Glyph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atributo5GlyphActionPerformed(evt);
            }
        });

        atributo7Glyph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        atributo7Glyph.setEnabled(false);
        atributo7Glyph.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                atributo7GlyphItemStateChanged(evt);
            }
        });
        atributo7Glyph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atributo7GlyphActionPerformed(evt);
            }
        });

        atributo6Glyph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        atributo6Glyph.setEnabled(false);
        atributo6Glyph.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                atributo6GlyphItemStateChanged(evt);
            }
        });
        atributo6Glyph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atributo6GlyphActionPerformed(evt);
            }
        });

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/logo1.png"))); // NOI18N

        jLabel7.setText("Textura:");

        jLabel8.setText("Arco:");

        forma2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "..."}));
        forma2.setEnabled(false);

        forma1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        forma1.setEnabled(false);
        forma1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forma1ActionPerformed(evt);
            }
        });

        forma4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "..." }));
        forma4.setEnabled(false);

        forma3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1" }));
        forma3.setEnabled(false);
        forma3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forma3ActionPerformed(evt);
            }
        });

        jLabel16.setText("2° Forma");

        jLabel18.setText("3° Forma");

        jLabel19.setText("4° Forma");

        jLabel20.setText("5° Forma");

        jLabel21.setText("1° Forma");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(checkGlyph, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(atributo4Glyph, 0, 84, Short.MAX_VALUE)
                            .addComponent(atributo3Glyph, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(forma2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel16))
                            .addComponent(forma1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(atributo6Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(atributo5Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(forma4, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jLabel19))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(forma3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(atributo1Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(atributo2Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(60, 60, 60)
                                        .addComponent(jLabel18))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(jLabel7)))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(botaoGerarGlyphs, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabel20)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(atributo7Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(jLabel8)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(atributo1Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(atributo2Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(checkGlyph)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(jLabel20)
                                .addGap(11, 11, 11))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(forma1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(atributo3Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(atributo4Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(forma2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(forma4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(atributo6Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(atributo5Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(forma3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(atributo7Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botaoGerarGlyphs, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel14)
                .addGap(22, 22, 22))
        );

        jTabbedPane1.addTab("Glyph", jPanel2);

        jLabel6.setText("Available Attributes:");

        colunasDetalhesList1.setEnabled(false);
        colunasDetalhesList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                colunasDetalhesList1ValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(colunasDetalhesList1);

        inserirBotao_detalhes.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        inserirBotao_detalhes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDir.png"))); // NOI18N
        inserirBotao_detalhes.setEnabled(false);
        inserirBotao_detalhes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirBotao_detalhesActionPerformed(evt);
            }
        });

        removerBotao_detalhes.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        removerBotao_detalhes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaEsq.png"))); // NOI18N
        removerBotao_detalhes.setEnabled(false);
        removerBotao_detalhes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerBotao_detalhesActionPerformed(evt);
            }
        });

        colunasDetalhesList2.setEnabled(false);
        colunasDetalhesList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                colunasDetalhesList2ValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(colunasDetalhesList2);

        jLabel12.setText("Details on Demand:");

        updateDetailsButton.setText("Update Details");
        updateDetailsButton.setEnabled(false);
        updateDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDetailsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(updateDetailsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inserirBotao_detalhes, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removerBotao_detalhes, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))))
                .addContainerGap(110, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(inserirBotao_detalhes, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removerBotao_detalhes, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(jScrollPane6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(updateDetailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(79, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Details", jPanel3);

        legendaBarraRolage.setBackground(new java.awt.Color(255, 255, 255));
        legendaBarraRolage.setBorder(null);

        painelLegendaVis.setLayout(grid);

        legendaBarraRolage.setViewportView(painelLegendaVis);

        javax.swing.GroupLayout painelDireitaLayout = new javax.swing.GroupLayout(painelDireita);
        painelDireita.setLayout(painelDireitaLayout);
        painelDireitaLayout.setHorizontalGroup(
            painelDireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDireitaLayout.createSequentialGroup()
                .addGroup(painelDireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(painelDireitaLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(progressoBarra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(painelDireitaLayout.createSequentialGroup()
                        .addComponent(legendaBarraRolage, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        painelDireitaLayout.setVerticalGroup(
            painelDireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDireitaLayout.createSequentialGroup()
                .addComponent(progressoBarra, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(legendaBarraRolage, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(painelDireita);

        fileMenu.setText("File");

        fileMenuItem.setText("File");
        fileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(fileMenuItem);

        jMenuBar1.add(fileMenu);

        helpMenu.setText("Decision Tree");
        helpMenu.setToolTipText("");

        decisionTreeActivate.setText("Activate");
        decisionTreeActivate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decisionTreeActivateActionPerformed(evt);
            }
        });
        helpMenu.add(decisionTreeActivate);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1399, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public String[] parseListString2Array(ListModel<String> lista) {
        String[] convertida = new String[lista.getSize()];
        for (int i = 0; i < convertida.length; i++) {
            convertida[i] = lista.getElementAt(i);
        }
        return convertida;
    }

    private void fileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "TXT & CSV Files", "txt", "csv");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            limparResquiciosBasesAnteriores();
            checkGlyph.setEnabled(false);

            selectedFile = chooser.getSelectedFile();

            progressoBarra.setVisible(true);
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            //Instances of javax.swing.SwingWorker are not reusuable, so
            //we create new instances as needed.
            task = new Task();
            task.addPropertyChangeListener(this);
            task.execute();
        } else {
            JOptionPane.showMessageDialog(null, "The file type can not be read.", "Erro!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_fileMenuItemActionPerformed

    private void checkLegendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkLegendaActionPerformed
        if (checkLegenda.isSelected()) {
            Constantes.setShowLegenda(true);
            legendaComboBox.setEnabled(true);
        } else {
            Constantes.setShowLegenda(false);
            legendaComboBox.setEnabled(false);
        }
    }//GEN-LAST:event_checkLegendaActionPerformed

    private void removerBotao_treemapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerBotao_treemapActionPerformed
        List<Object> newListaAtribTreemap = new ArrayList<>();
        List<Object> atributos = new ArrayList<>();

        for (int i = 0; i < colunasHierarquicasList.getModel().getSize(); i++) {
            String elementAt = colunasHierarquicasList.getModel().getElementAt(i);
            atributos.add(elementAt);
        }
        atributos.addAll(colunasHierarquicasList2.getSelectedValuesList());
        atributos.sort(null);
        loadItensHierarquiaTreemap(atributos.toArray());

        //remover o conteudo da lista de hierarquia treemap
        ListModel<String> modelGlyphs = colunasHierarquicasList2.getModel();
        List<String> selectedValuesList = colunasHierarquicasList2.getSelectedValuesList();
        for (int i = 0; i < modelGlyphs.getSize(); i++) {
            if (!selectedValuesList.contains(modelGlyphs.getElementAt(i))) {
                newListaAtribTreemap.add(modelGlyphs.getElementAt(i));
            }
        }
        loadVariaveisEscolhidasList(newListaAtribTreemap.toArray(), colunasHierarquicasList2);

        if (colunasHierarquicasList2.getModel().getSize() == 0) {
            colunasHierarquicasList2.setEnabled(false);
        }
    }//GEN-LAST:event_removerBotao_treemapActionPerformed

    private void baixoBotao_treemapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baixoBotao_treemapActionPerformed
        List<String> novaLista = new ArrayList<>(colunasHierarquicasList2.getModel().getSize());
        for (int i = 0; i < colunasHierarquicasList2.getModel().getSize(); i++) {
            novaLista.add(colunasHierarquicasList2.getModel().getElementAt(i));
        }
        int[] selectedValuesList = colunasHierarquicasList2.getSelectedIndices();
        for (int i = 0; i < novaLista.size(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    String caraFrente = novaLista.get(i + 1);
                    String caraAtual = novaLista.get(i);
                    novaLista.add(i + 1, caraAtual);
                    novaLista.add(i, caraFrente);
                    novaLista.remove(i + 2);
                    novaLista.remove(i + 2);
                    break;
                }
            }
        }
        loadVariaveisEscolhidasList(novaLista.toArray(), colunasHierarquicasList2);
    }//GEN-LAST:event_baixoBotao_treemapActionPerformed

    private void cimaBotao_treemapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cimaBotao_treemapActionPerformed
        List<String> novaLista = new ArrayList<>();
        int[] selectedValuesList = colunasHierarquicasList2.getSelectedIndices();
        for (int i = 0; i < colunasHierarquicasList2.getModel().getSize(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    novaLista.add(i - 1, colunasHierarquicasList2.getModel().getElementAt(i));
                } else {
                    novaLista.add(colunasHierarquicasList2.getModel().getElementAt(i));
                }
            }
        }
        loadVariaveisEscolhidasList(novaLista.toArray(), colunasHierarquicasList2);
    }//GEN-LAST:event_cimaBotao_treemapActionPerformed

    private void colunasHierarquicasList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_colunasHierarquicasList2ValueChanged
        if (colunasHierarquicasList2.getSelectedValuesList().size() >= 1) {
            removerBotao_treemap.setEnabled(true);
            if (colunasHierarquicasList2.getSelectedIndex() > 0) {
                cimaBotao_treemap.setEnabled(true);
            } else {
                cimaBotao_treemap.setEnabled(false);
            }
            if (colunasHierarquicasList2.getSelectedIndex() < colunasHierarquicasList2.getModel().getSize() - 1) {
                baixoBotao_treemap.setEnabled(true);
            } else {
                baixoBotao_treemap.setEnabled(false);
            }
        } else {
            removerBotao_treemap.setEnabled(false);
            cimaBotao_treemap.setEnabled(false);
            baixoBotao_treemap.setEnabled(false);
        }
    }//GEN-LAST:event_colunasHierarquicasList2ValueChanged

    private void inserirBotao_treemapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirBotao_treemapActionPerformed
        List<Object> newListaAtribTreemap = new ArrayList<>();
        List<Object> atributosEscolhidos = new ArrayList<>();
        for (int i = 0; i < colunasHierarquicasList2.getModel().getSize(); i++) {
            String elementAt = colunasHierarquicasList2.getModel().getElementAt(i);
            atributosEscolhidos.add(elementAt);
        }
        atributosEscolhidos.addAll(colunasHierarquicasList.getSelectedValuesList());
        atributosEscolhidos.sort(null);
        loadVariaveisEscolhidasList(atributosEscolhidos.toArray(), colunasHierarquicasList2);
        colunasHierarquicasList2.setEnabled(true);
        botaoGerarVisualizacao.setEnabled(true);

        //remover o conteudo da lista de atributos original
        ListModel<String> modelOriginal = colunasHierarquicasList.getModel();
        List<String> selectedValuesList = colunasHierarquicasList.getSelectedValuesList();
        for (int i = 0; i < modelOriginal.getSize(); i++) {
            if (!selectedValuesList.contains(modelOriginal.getElementAt(i))) {
                newListaAtribTreemap.add(modelOriginal.getElementAt(i));
            }
        }
        loadItensHierarquiaTreemap(newListaAtribTreemap.toArray());
    }//GEN-LAST:event_inserirBotao_treemapActionPerformed

    private void colunasHierarquicasListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_colunasHierarquicasListValueChanged
        if (colunasHierarquicasList.getSelectedValuesList().size() >= 1) {
            inserirBotao_treemap.setEnabled(true);
        } else {
            inserirBotao_treemap.setEnabled(false);
        }
    }//GEN-LAST:event_colunasHierarquicasListValueChanged

    private void botaoGerarVisualizacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGerarVisualizacaoActionPerformed
        limparPainelEsquerda();
        itemTamanho = tamanhoTreemapComboBox.getSelectedItem().toString();
        itemLegenda = legendaComboBox.getSelectedItem().toString();
        itemCor = corTreemapComboBox.getSelectedItem().toString();
        String[] itensHierarquia = parseListString2Array(colunasHierarquicasList2.getModel());
        String[] itensDetalhes = parseListString2Array(colunasDetalhesList2.getModel());

        visualizationTreemap = new VisualizationsArea(painelEsquerda.getWidth(), painelEsquerda.getHeight(),
                manipulador, itemTamanho, itensHierarquia, itemLegenda, itemCor, itensDetalhes);

        painelEsquerda.add(layerPane);
        view = visualizationTreemap.getView();
        layerPane.setBounds(view.getBounds());
        layerPane.add(view, new Integer(0), 0);

        progressoBarra.setVisible(false);
        atualizarLegendaTreemap(itemCor);
        checkGlyph.setEnabled(true);
        limparCacheGlyphs();
    }//GEN-LAST:event_botaoGerarVisualizacaoActionPerformed

    private void colunasDetalhesList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_colunasDetalhesList1ValueChanged
        if (colunasDetalhesList1.getSelectedValuesList().size() >= 1) {
            inserirBotao_detalhes.setEnabled(true);
        } else {
            inserirBotao_detalhes.setEnabled(false);
        }
    }//GEN-LAST:event_colunasDetalhesList1ValueChanged

    private void inserirBotao_detalhesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirBotao_detalhesActionPerformed
        List<Object> newListaAtribTreemap = new ArrayList<>();
        List<Object> atributosEscolhidos = new ArrayList<>();
        for (int i = 0; i < colunasDetalhesList2.getModel().getSize(); i++) {
            String elementAt = colunasDetalhesList2.getModel().getElementAt(i);
            atributosEscolhidos.add(elementAt);
        }
        atributosEscolhidos.addAll(colunasDetalhesList1.getSelectedValuesList());
        atributosEscolhidos.sort(null);
        loadVariaveisEscolhidasList(atributosEscolhidos.toArray(), colunasDetalhesList2);
        colunasDetalhesList2.setEnabled(true);
//        botaoGerarVisualizacao.setEnabled(true);

        //remover o conteudo da lista de atributos original
        ListModel<String> modelOriginal = colunasDetalhesList1.getModel();
        List<String> selectedValuesList = colunasDetalhesList1.getSelectedValuesList();
        for (int i = 0; i < modelOriginal.getSize(); i++) {
            if (!selectedValuesList.contains(modelOriginal.getElementAt(i))) {
                newListaAtribTreemap.add(modelOriginal.getElementAt(i));
            }
        }
        loadItensDetalhes(newListaAtribTreemap.toArray());
        updateDetailsButton.setEnabled(true);
    }//GEN-LAST:event_inserirBotao_detalhesActionPerformed

    private void removerBotao_detalhesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerBotao_detalhesActionPerformed
        List<Object> newListaAtribTreemap = new ArrayList<>();
        List<Object> atributos = new ArrayList<>();

        for (int i = 0; i < colunasDetalhesList1.getModel().getSize(); i++) {
            String elementAt = colunasDetalhesList1.getModel().getElementAt(i);
            atributos.add(elementAt);
        }
        atributos.addAll(colunasDetalhesList2.getSelectedValuesList());
        atributos.sort(null);
        loadItensDetalhes(atributos.toArray());

        //remover o conteudo da lista de hierarquia treemap
        ListModel<String> modelGlyphs = colunasDetalhesList2.getModel();
        List<String> selectedValuesList = colunasDetalhesList2.getSelectedValuesList();
        for (int i = 0; i < modelGlyphs.getSize(); i++) {
            if (!selectedValuesList.contains(modelGlyphs.getElementAt(i))) {
                newListaAtribTreemap.add(modelGlyphs.getElementAt(i));
            }
        }
        loadVariaveisEscolhidasList(newListaAtribTreemap.toArray(), colunasDetalhesList2);

        if (colunasDetalhesList2.getModel().getSize() == 0) {
            colunasDetalhesList2.setEnabled(false);
        }
    }//GEN-LAST:event_removerBotao_detalhesActionPerformed

    private void colunasDetalhesList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_colunasDetalhesList2ValueChanged
        if (colunasDetalhesList2.getSelectedValuesList().size() >= 1) {
            removerBotao_detalhes.setEnabled(true);
        } else {
            removerBotao_detalhes.setEnabled(false);
        }
    }//GEN-LAST:event_colunasDetalhesList2ValueChanged

    private void updateDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDetailsButtonActionPerformed
        String[] valoresEscolhidos = parseListString2Array(colunasDetalhesList2.getModel());
        visualizationTreemap.setColunasDetalhesDemanda(valoresEscolhidos);
        visualizationTreemap.updateDetalhesDemanda();

        botaoGerarVisualizacaoActionPerformed(evt);
    }//GEN-LAST:event_updateDetailsButtonActionPerformed

    private void decisionTreeActivateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decisionTreeActivateActionPerformed
        botaoGerarGlyphsActionPerformed(evt);
        if (decisionTreeActivate.isSelected()) {
            logger.info("Arvore de decisão ativada");//.log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_decisionTreeActivateActionPerformed

    private void atributo6GlyphItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_atributo6GlyphItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_atributo6GlyphItemStateChanged

    private void atributo7GlyphItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_atributo7GlyphItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_atributo7GlyphItemStateChanged

    private void atributo5GlyphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atributo5GlyphActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_atributo5GlyphActionPerformed

    private void atributo5GlyphItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_atributo5GlyphItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_atributo5GlyphItemStateChanged

    private void atributo4GlyphItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_atributo4GlyphItemStateChanged
        //        loadVariaveisGlyph(getListaAtributosCategoricos(5), atributo5Glyph);
        //        atributo5Glyph.setEnabled(true);
    }//GEN-LAST:event_atributo4GlyphItemStateChanged

    private void atributo3GlyphItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_atributo3GlyphItemStateChanged
        //        loadVariaveisGlyph(getListaAtributosCategoricos(4), atributo4Glyph);
        //        atributo4Glyph.setEnabled(true);
    }//GEN-LAST:event_atributo3GlyphItemStateChanged

    private void atributo2GlyphItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_atributo2GlyphItemStateChanged
        //        loadVariaveisGlyph(getListaAtributosCategoricos(3), atributo3Glyph);
        //        atributo3Glyph.setEnabled(true);
    }//GEN-LAST:event_atributo2GlyphItemStateChanged

    private void atributo1GlyphItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_atributo1GlyphItemStateChanged
        //        atributo2Glyph.setEnabled(true);
    }//GEN-LAST:event_atributo1GlyphItemStateChanged

    private void botaoGerarGlyphsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGerarGlyphsActionPerformed
        glyphPanel.setBounds(painelEsquerda.getBounds());
        glyphPanel.setUseDecisionTree(decisionTreeActivate.isSelected());
        glyphPanel.setManipulador(manipulador);
        ArrayList<Object> atributosEscolhidosGlyph = getAtributosEscolhidosGlyph();
        ArrayList<Object> formasEscolhidosGlyph = getFormaEscolhidasGlyph();

        glyphPanel.setAtributosEscolhidos(atributosEscolhidosGlyph,formasEscolhidosGlyph);
        glyphPanel.setVisible(true);
        glyphPanel.repaint();

        atualizarLegendaGlyphs(atributosEscolhidosGlyph,formasEscolhidosGlyph);
    }//GEN-LAST:event_botaoGerarGlyphsActionPerformed

    private void checkGlyphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkGlyphActionPerformed
        if (checkGlyph.isSelected()) {
            Constantes.setShowGlyph(true);
            glyphPanel = new GlassPanel();
            glyphPanel.setTMView(view);

            atributo1Glyph.setEnabled(true);
            atributo2Glyph.setEnabled(true);
            atributo3Glyph.setEnabled(true);
            atributo4Glyph.setEnabled(true);
            atributo5Glyph.setEnabled(true);
            atributo6Glyph.setEnabled(true);
            atributo7Glyph.setEnabled(true);
            forma1.setEnabled(true);
            forma2.setEnabled(true);
            forma3.setEnabled(true);
            forma4.setEnabled(true);
            botaoGerarGlyphs.setEnabled(true);
            layerPane.add(glyphPanel, new Integer(1), 0);
        } else {
            limparCacheGlyphs();
        }
    }//GEN-LAST:event_checkGlyphActionPerformed

    private void atributo4GlyphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atributo4GlyphActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_atributo4GlyphActionPerformed

    private void atributo7GlyphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atributo7GlyphActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_atributo7GlyphActionPerformed

    private void atributo6GlyphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atributo6GlyphActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_atributo6GlyphActionPerformed

    private void forma3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forma3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_forma3ActionPerformed

    private void forma1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forma1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_forma1ActionPerformed

    private void atributo3GlyphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atributo3GlyphActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_atributo3GlyphActionPerformed

    private void atributo1GlyphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atributo1GlyphActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_atributo1GlyphActionPerformed

    private ArrayList<Object> getAtributosEscolhidosGlyph() {
        ArrayList<Object> atributosEscolhidosGlyph = new ArrayList<>();
        atributosEscolhidosGlyph.add(atributo1Glyph.getSelectedItem());
        atributosEscolhidosGlyph.add(atributo2Glyph.getSelectedItem());
        atributosEscolhidosGlyph.add(atributo3Glyph.getSelectedItem());
        atributosEscolhidosGlyph.add(atributo4Glyph.getSelectedItem());
        atributosEscolhidosGlyph.add(atributo5Glyph.getSelectedItem());
        atributosEscolhidosGlyph.add(atributo6Glyph.getSelectedItem());
        atributosEscolhidosGlyph.add(atributo7Glyph.getSelectedItem());

        return atributosEscolhidosGlyph;
    }
    
    private ArrayList<Object> getFormaEscolhidasGlyph() {
        ArrayList<Object> formaEscolhidasGlyph = new ArrayList<>();
        formaEscolhidasGlyph.add(forma1.getSelectedItem());
        formaEscolhidasGlyph.add(forma2.getSelectedItem());
        formaEscolhidasGlyph.add(forma3.getSelectedItem());
        formaEscolhidasGlyph.add(forma4.getSelectedItem());
        
        return formaEscolhidasGlyph;
    }
    
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                frame = new Main();
                frame.setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> atributo1Glyph;
    private javax.swing.JComboBox<String> atributo2Glyph;
    private javax.swing.JComboBox<String> atributo3Glyph;
    private javax.swing.JComboBox<String> atributo4Glyph;
    private javax.swing.JComboBox<String> atributo5Glyph;
    private javax.swing.JComboBox<String> atributo6Glyph;
    private javax.swing.JComboBox<String> atributo7Glyph;
    private javax.swing.JButton baixoBotao_treemap;
    private javax.swing.JButton botaoGerarGlyphs;
    private javax.swing.JButton botaoGerarVisualizacao;
    private javax.swing.JCheckBox checkGlyph;
    private javax.swing.JCheckBox checkLegenda;
    private javax.swing.JButton cimaBotao_treemap;
    private javax.swing.JList<String> colunasDetalhesList1;
    private javax.swing.JList<String> colunasDetalhesList2;
    private javax.swing.JList<String> colunasHierarquicasList;
    private javax.swing.JList<String> colunasHierarquicasList2;
    private javax.swing.JComboBox<String> corTreemapComboBox;
    private javax.swing.JCheckBoxMenuItem decisionTreeActivate;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileMenuItem;
    private javax.swing.JComboBox<String> forma1;
    private javax.swing.JComboBox<String> forma2;
    private javax.swing.JComboBox<String> forma3;
    private javax.swing.JComboBox<String> forma4;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton inserirBotao_detalhes;
    private javax.swing.JButton inserirBotao_treemap;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JScrollPane legendaBarraRolage;
    private javax.swing.JComboBox<String> legendaComboBox;
    private javax.swing.JPanel painelDireita;
    private javax.swing.JPanel painelEsquerda;
    private javax.swing.JPanel painelLegendaVis;
    private javax.swing.JProgressBar progressoBarra;
    private javax.swing.JButton removerBotao_detalhes;
    private javax.swing.JButton removerBotao_treemap;
    private javax.swing.JComboBox<String> tamanhoTreemapComboBox;
    private javax.swing.JButton updateDetailsButton;
    // End of variables declaration//GEN-END:variables
    static Main frame;
    private JLayeredPane layerPane;
    private GlassPanel glyphPanel;
    private LegendaVisualizacao legendaVisualizacao;
    private String itemTamanho;
    private String itemLegenda;
    private String itemCor;
    private TMView view;
    private VisualizationsArea visualizationTreemap;

    private ManipuladorArquivo manipulador;
    private File selectedFile;
    private Task task;

    private void atualizarLegendaGlyphs(ArrayList<Object> atributosEscolhidosGlyph,ArrayList<Object> formasEscolhidosGlyph) {
        painelLegendaVis.removeAll();
        atualizarLegendaTreemap(itemCor);
        legendaVisualizacao.setAtributosGlyphs(atributosEscolhidosGlyph);
        legendaVisualizacao.setFormasEscolhidas(formasEscolhidosGlyph);
        for (int i = 0; i < atributosEscolhidosGlyph.size(); i++) {
            if (!atributosEscolhidosGlyph.get(i).equals("---")) {
                JPanel painelDimensao = legendaVisualizacao.addLegendaDimensao(i);
                painelLegendaVis.setLayout(new BoxLayout(painelLegendaVis, BoxLayout.Y_AXIS));
                painelLegendaVis.add(painelDimensao);
            }
            painelLegendaVis.revalidate();
        }
    }

    private void atualizarLegendaTreemap(String itemCor) {
        painelLegendaVis.removeAll();
        if (!itemCor.equals("---")) {
            JPanel painelDimensao = legendaVisualizacao.addLegendaCorTreemap(itemCor);
            painelLegendaVis.add(painelDimensao);
        }
    }

    private void limparCacheGlyphs() {
        Constantes.setShowGlyph(false);
        botaoGerarGlyphs.setEnabled(false);
        if (glyphPanel != null) {
            glyphPanel.setVisible(false);
            layerPane.remove(glyphPanel);
            glyphPanel = null;
            atributo1Glyph.setEnabled(false);
            atributo2Glyph.setEnabled(false);
            atributo3Glyph.setEnabled(false);
            atributo4Glyph.setEnabled(false);
            atributo5Glyph.setEnabled(false);
            painelLegendaVis.removeAll();
            painelLegendaVis.repaint();
        }
        if (checkGlyph.isSelected()) {
            checkGlyph.setSelected(false);
        }
    }

    private void loadAtributosDetalhes() {
        List<String> itens = new ArrayList<>();
        List<String> itens2 = new ArrayList<>();
        for (String cabecalho : manipulador.getCabecalho()) {
            itens.add(cabecalho);
        }
        for (int i = 0; i < 3; i++) {
            String itemRemovido = itens.remove(0);
            itens2.add(itemRemovido);
        }
        itens.remove(itens.size() - 1);
        DefaultComboBoxModel model = new DefaultComboBoxModel(itens.toArray());
        DefaultComboBoxModel model2 = new DefaultComboBoxModel(itens2.toArray());

        colunasDetalhesList1.setModel(model);
        colunasDetalhesList2.setModel(model2);
        colunasDetalhesList1.setEnabled(true);
        colunasDetalhesList2.setEnabled(true);
    }

    private void limparResquiciosBasesAnteriores() {
        limparPainelEsquerda();
        limparCacheGlyphs();
        painelLegendaVis.removeAll();
        Object[] vazio = {};
        DefaultComboBoxModel model = new DefaultComboBoxModel(vazio);
        colunasHierarquicasList2.setModel(model);

    }

    class Task extends SwingWorker<Void, Void> {

        /*
         * Main task. Executed in background thread.
         */
        @Override
        public Void doInBackground() {
            int progress = 0;
            //Initialize progress property.
            setProgress(0);
            int ordem = 0;
            while (progress < 100) {
                //Sleep for up to one second.
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ignore) {
                    ignore.printStackTrace();
                }
                //Make progress.     
                ordem++;
                progress = executaTarefas(ordem, progress);
                setProgress(Math.min(progress, 100));
            }
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {
            Toolkit.getDefaultToolkit().beep();
            setCursor(null); //turn off the wait cursor
        }
    }

    private int executaTarefas(int ordem, int porcentagem) {
        int tarefas = 10;
        switch (ordem) {
            case 1:
                manipulador = new ManipuladorArquivo();
                manipulador.lerArquivo(selectedFile);
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Tratando arquivo: " + porcentagem + "%");
                break;
            case 2:
                try {
                    manipulador.montarColunas(manipulador.getCabecalho(), manipulador.getTipos());
                } catch (Exception e) {
                    e.printStackTrace();
                }
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Montando colunas: " + porcentagem + "%");
                break;
            case 3:
                try {
                    manipulador.carregarItensTreemap();
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando itens no TreeMap: " + porcentagem + "%");
                break;
            case 4:
                try {
                    for (int i = 0; i < manipulador.getColunas().length; i++) {
                        Coluna c = manipulador.getColunas()[i];
                        c.configurarDescricao(manipulador.getDadosColuna(manipulador.getCabecalho()[i]));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Definindo a descrição das colunas: " + porcentagem + "%");
                break;
            case 5:
                loadItensTamanhoTreemap();
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Preparando lista tamanho: " + porcentagem + "%");
                break;
            case 6:
                loadItensLegendaTreemap();
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Preparando lista legenda: " + porcentagem + "%");
                break;
            case 7:
                loadVariaveisGlyph(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_1, true), atributo1Glyph);
                loadVariaveisGlyph(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_2, true), atributo2Glyph);
                loadVariaveisGlyph(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_3, true), atributo3Glyph);
                loadVariaveisGlyph(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_4, true), atributo4Glyph);
                loadVariaveisGlyph(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_5, true), atributo5Glyph);
                loadVariaveisGlyph(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_6, true), atributo6Glyph);
                loadVariaveisGlyph(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_7, true), atributo7Glyph);
                
                loadFormasGlyph(getListaFormas(true),forma1);
                loadFormasGlyph(getListaFormas(true),forma2);
                loadFormasGlyph(getListaFormas(true),forma3);
                loadFormasGlyph(getListaFormas(true),forma4);

                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando variáveis glyph: " + porcentagem + "%");
                break;
            case 8:
                loadItensHierarquiaTreemap(getColunasCategoricas().toArray());
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando variáveis hierarquia Treemap: " + porcentagem + "%");
                break;
            case 9:
                loadItensCoresTreemap(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_2, false));
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando variáveis cores Treemap: " + porcentagem + "%");
                break;
            case 10:
                loadAtributosDetalhes();
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando variáveis para Detalhes sob Demanda: " + porcentagem + "%");
                break;
            default:
                throw new AssertionError();
        }
        return porcentagem;
    }

    private void limparPainelEsquerda() {
        painelEsquerda.removeAll();
        painelEsquerda.repaint();
    }

    private void loadItensTamanhoTreemap() {
        List<String> itens = new ArrayList<>();
        for (String cabecalho : manipulador.getCabecalho()) {
            String tipo = manipulador.getMapaCabecalho().get(cabecalho);
            if (tipo.equalsIgnoreCase(Metadados.TipoDados.Integer.name())
                    || tipo.equalsIgnoreCase(Metadados.TipoDados.Double.name())) {
                itens.add(cabecalho);
            }
        }
        atualizarComboBox(tamanhoTreemapComboBox, itens);
        tamanhoTreemapComboBox.setEnabled(true);
    }

    private void loadItensLegendaTreemap() {
        List<String> itens = new ArrayList<>();
        itens.addAll(Arrays.asList(manipulador.getCabecalho()));
        itens.remove(manipulador.getCabecalho().length - 1);
        atualizarComboBox(legendaComboBox, itens);
        botaoGerarVisualizacao.setEnabled(true);
    }

    private void loadItensHierarquiaTreemap(Object[] objs) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        colunasHierarquicasList.setModel(model);
        colunasHierarquicasList.setEnabled(true);
    }

    private void loadItensDetalhes(Object[] objs) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        colunasDetalhesList1.setModel(model);
        colunasDetalhesList1.setEnabled(true);
    }

    private void loadItensCoresTreemap(Object[] objs) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        corTreemapComboBox.setModel(model);
        corTreemapComboBox.setEnabled(true);
    }

    /**
     * Metodo usado para carregar os atributos categoricos nas listas de glyphs
     *
     * @param nivel
     * @return um array contendo os atributos que serao exibidos nas listas dos
     * glyphs
     */
    private Object[] getListaAtributosCategoricos(Constantes.NivelGlyph nivel, boolean glyph) {
        ArrayList<String> list = new ArrayList<>();
        list.add(0, "---");
        list.addAll(analisarAtributosCategoricos(nivel, glyph));
        return list.toArray();
    }
    private List<String> analisarQuantAtributosCategoricos(List<String> list, Object[] obj) {
        for (String colunasCategorica : getColunasCategoricas()) {
            Coluna c = ManipuladorArquivo.getColuna(colunasCategorica);
            int quantDadosDistintos = c.getDadosDistintos().size();
            if (quantDadosDistintos <= obj.length) {
                list.add(c.getName());
            }
        }
        return list;
    }
    private String[] getListaFormas(boolean glyph) {
        String [] list = new String[10];
        
         for (int i = 0; i <GeometryFactory.FORMAS.GLYPH_FORMAS.values().length-2 ; i++) {
            list[i] = GeometryFactory.FORMAS.GLYPH_FORMAS.values()[i].name();
        }
        return list;
    }    

    private List<String> analisarAtributosCategoricos(Constantes.NivelGlyph nivel, boolean glyph) {
        ArrayList<String> list = new ArrayList<>();
        switch (nivel) {
            case NIVEL_1:
                analisarQuantAtributosCategoricos(list, Constantes.TIPO_TEXTURA);
                break;
            case NIVEL_2:
                if (glyph) {
                    analisarQuantAtributosCategoricos(list, Constantes.getCorGlyphs());
                } else {
                    analisarQuantAtributosCategoricos(list, Constantes.getCor());
                }
                break;
            case NIVEL_3:
                analisarQuantAtributosCategoricos(list, Constantes.TIPOS_FORMAS_GEOMETRICAS);
                break;
            case NIVEL_4:
                analisarQuantAtributosCategoricos(list, Constantes.getCorFormas());
                break;
            case NIVEL_5:
                analisarQuantAtributosCategoricos(list, Constantes.getCorFormas());
                break;
            case NIVEL_6:
                analisarQuantAtributosCategoricos(list, Constantes.getCorFormas());
                break;
            case NIVEL_7:
                analisarQuantAtributosCategoricos(list,Constantes.visivel );
                break;
            default:
                System.err.println("Nao foi carregar atributos para a dimensão.");
        }
        return list;
    }

    private List<String> getColunasCategoricas() {
        List<String> list = new ArrayList<>();
        for (int i = 0; i < manipulador.getColunas().length - 1; i++) {
            Coluna c = manipulador.getColunas()[i];
            if (c.getDescription().equals(Metadados.Descricao.CATEGORICAL)) {
                list.add(c.getName());
            }
        }
        return list;
    }

    private void atualizarComboBox(JComboBox comboBox, List<String> itens) {
        Object[] items = itens.toArray();
        DefaultComboBoxModel model = new DefaultComboBoxModel(items);
        comboBox.setModel(model);
    }

    private void loadVariaveisGlyph(Object[] objs, JComboBox<String> atributo) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        atributo.setModel(model);
    }
    
    private void loadFormasGlyph(Object[] objs, JComboBox<String> atributo) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        atributo.setModel(model);
    }

    private void loadVariaveisEscolhidasGlyph(Object[] objs) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
//        variaveisGlyphList2.setModel(model);
    }

    private void loadVariaveisEscolhidasList(Object[] objs, JList<String> jList) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        jList.setModel(model);
    }

//    private void loadVariaveisStarGlyph() {
//        List<String> itens = new ArrayList<>();
//        for (String cabecalho : manipulador.getCabecalho()) {
//            String tipo = manipulador.getMapaCabecalho().get(cabecalho);
//            if (tipo.equalsIgnoreCase(Metadados.TipoDados.Integer.name())
//                    || tipo.equalsIgnoreCase(Metadados.TipoDados.Double.name())) {
//                itens.add(cabecalho);
//            }
//        }
//        Object[] items = itens.toArray();
//        DefaultComboBoxModel model = new DefaultComboBoxModel(items);
//        variaveisGlyphList.setModel(model);
//    }
    private void appendToPane(JTextPane tp, String msg, Color c) {
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        int len = tp.getDocument().getLength();
        tp.setCaretPosition(len);
        tp.setCharacterAttributes(aset, false);
        tp.replaceSelection(msg);
    }

//    private void prepararLegendaStarGlyph(List<String> itensVariaveisStarGlyph) {
//        painelLegenda.setEditable(true);
//        painelLegenda.setText("");
//        for (int i = 0; i < itensVariaveisStarGlyph.size(); i++) {
//            appendToPane(painelLegenda, itensVariaveisStarGlyph.get(i) + "\n", Color.decode(Constantes.getCor()[i]));
//        }
//        painelLegenda.setEditable(false);
//    }
    /**
     * Invoked when task's progress property changes.
     */
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (Constantes.PROGRESS == evt.getPropertyName()) {
            int progress = (Integer) evt.getNewValue();
            progressoBarra.setValue(progress);
        }
    }
}
