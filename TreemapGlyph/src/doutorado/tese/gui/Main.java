/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package doutorado.tese.gui;

import doutorado.tese.io.ManipuladorArquivo;
import doutorado.tese.util.Coluna;
import doutorado.tese.util.Constantes;
import doutorado.tese.legenda.LegendaVisualizacao;
import doutorado.tese.util.Metadados;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.JTextPane;
import javax.swing.ListModel;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import net.bouthier.treemapAWT.TMView;

/**
 *
 * @author Anderson
 */
public class Main extends javax.swing.JFrame implements PropertyChangeListener {

    /**
     * Creates new form Main
     */
    public Main() {

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();

        layerPane = new JLayeredPane();

        legendaVisualizacao = new LegendaVisualizacao(painelLegendaVis.getBounds());
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        painelEsquerda = new javax.swing.JPanel();
        painelDireita = new javax.swing.JPanel();
        progressoBarra = new javax.swing.JProgressBar();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        botaoGerarVisualizacao = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        colunasHierarquicasList = new javax.swing.JList<>();
        inserirBotao_treemap = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        colunasHierarquicasList2 = new javax.swing.JList<>();
        cimaBotao_treemap = new javax.swing.JButton();
        baixoBotao_treemap = new javax.swing.JButton();
        removerBotao_treemap = new javax.swing.JButton();
        checkLegenda = new javax.swing.JCheckBox();
        legendaComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        tamanhoTreeampComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        corTreemapComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        checkGlyph = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        botaoGerarGlyphs = new javax.swing.JButton();
        atributo1Glyph = new javax.swing.JComboBox<>();
        atributo2Glyph = new javax.swing.JComboBox<>();
        atributo3Glyph = new javax.swing.JComboBox<>();
        atributo4Glyph = new javax.swing.JComboBox<>();
        atributo5Glyph = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        legendaBarraRolage = new javax.swing.JScrollPane();
        GridLayout grid = new GridLayout(0, 1);
        painelLegendaVis = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Treemap Glyphs");

        jSplitPane1.setDividerLocation(1000);
        jSplitPane1.setOpaque(false);

        painelEsquerda.setBackground(new java.awt.Color(153, 255, 153));
        painelEsquerda.setOpaque(false);

        javax.swing.GroupLayout painelEsquerdaLayout = new javax.swing.GroupLayout(painelEsquerda);
        painelEsquerda.setLayout(painelEsquerdaLayout);
        painelEsquerdaLayout.setHorizontalGroup(
            painelEsquerdaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 953, Short.MAX_VALUE)
        );
        painelEsquerdaLayout.setVerticalGroup(
            painelEsquerdaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 644, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(painelEsquerda);

        painelDireita.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));

        progressoBarra.setName("teste"); // NOI18N
        progressoBarra.setStringPainted(true);

        botaoGerarVisualizacao.setText("View Treemap");
        botaoGerarVisualizacao.setEnabled(false);
        botaoGerarVisualizacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGerarVisualizacaoActionPerformed(evt);
            }
        });

        jLabel2.setText("Group Hierarchy:");

        colunasHierarquicasList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                colunasHierarquicasListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(colunasHierarquicasList);

        inserirBotao_treemap.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        inserirBotao_treemap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDir.png"))); // NOI18N
        inserirBotao_treemap.setEnabled(false);
        inserirBotao_treemap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirBotao_treemapActionPerformed(evt);
            }
        });

        colunasHierarquicasList2.setEnabled(false);
        colunasHierarquicasList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                colunasHierarquicasList2ValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(colunasHierarquicasList2);

        cimaBotao_treemap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaUp.png"))); // NOI18N
        cimaBotao_treemap.setEnabled(false);
        cimaBotao_treemap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cimaBotao_treemapActionPerformed(evt);
            }
        });

        baixoBotao_treemap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDown.png"))); // NOI18N
        baixoBotao_treemap.setEnabled(false);
        baixoBotao_treemap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baixoBotao_treemapActionPerformed(evt);
            }
        });

        removerBotao_treemap.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        removerBotao_treemap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaEsq.png"))); // NOI18N
        removerBotao_treemap.setEnabled(false);
        removerBotao_treemap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerBotao_treemapActionPerformed(evt);
            }
        });

        checkLegenda.setText("Label:");
        checkLegenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkLegendaActionPerformed(evt);
            }
        });

        legendaComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        legendaComboBox.setToolTipText("");
        legendaComboBox.setEnabled(false);

        jLabel1.setText("Size:");

        tamanhoTreeampComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        tamanhoTreeampComboBox.setEnabled(false);

        jLabel4.setText("Color:");

        corTreemapComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        corTreemapComboBox.setEnabled(false);

        jLabel5.setText("Available Attributes:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(checkLegenda)
                            .addGap(18, 18, 18)
                            .addComponent(legendaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGap(21, 21, 21)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel4))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(tamanhoTreeampComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(corTreemapComboBox, 0, 166, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inserirBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removerBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cimaBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(baixoBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel2)))
                    .addComponent(botaoGerarVisualizacao, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cimaBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(baixoBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(inserirBotao_treemap, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removerBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(legendaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkLegenda))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tamanhoTreeampComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(corTreemapComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botaoGerarVisualizacao, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Treemap", jPanel1);

        checkGlyph.setText("Glyph");
        checkGlyph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkGlyphActionPerformed(evt);
            }
        });

        jLabel3.setText("Available Attributes:");

        botaoGerarGlyphs.setText("View Glyphs");
        botaoGerarGlyphs.setEnabled(false);
        botaoGerarGlyphs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGerarGlyphsActionPerformed(evt);
            }
        });

        atributo1Glyph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        atributo1Glyph.setEnabled(false);
        atributo1Glyph.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                atributo1GlyphItemStateChanged(evt);
            }
        });

        atributo2Glyph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        atributo2Glyph.setEnabled(false);
        atributo2Glyph.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                atributo2GlyphItemStateChanged(evt);
            }
        });

        atributo3Glyph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        atributo3Glyph.setEnabled(false);
        atributo3Glyph.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                atributo3GlyphItemStateChanged(evt);
            }
        });

        atributo4Glyph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        atributo4Glyph.setEnabled(false);
        atributo4Glyph.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                atributo4GlyphItemStateChanged(evt);
            }
        });

        atributo5Glyph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        atributo5Glyph.setEnabled(false);

        jLabel7.setText("Attribute 1:");

        jLabel8.setText("Attribute 2:");

        jLabel9.setText("Attribute 3:");

        jLabel10.setText("Attribute 4:");

        jLabel11.setText("Attribute 5:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkGlyph, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(atributo2Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(atributo3Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(atributo4Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel11)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(atributo5Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(atributo1Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 92, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(botaoGerarGlyphs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkGlyph)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(atributo1Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(atributo2Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(atributo3Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(atributo4Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(atributo5Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botaoGerarGlyphs, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Glyph", jPanel2);

        legendaBarraRolage.setBackground(new java.awt.Color(255, 255, 255));
        legendaBarraRolage.setBorder(null);

        painelLegendaVis.setLayout(grid);

        legendaBarraRolage.setViewportView(painelLegendaVis);

        javax.swing.GroupLayout painelDireitaLayout = new javax.swing.GroupLayout(painelDireita);
        painelDireita.setLayout(painelDireitaLayout);
        painelDireitaLayout.setHorizontalGroup(
            painelDireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelDireitaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressoBarra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, Short.MAX_VALUE)
            .addComponent(legendaBarraRolage)
        );
        painelDireitaLayout.setVerticalGroup(
            painelDireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDireitaLayout.createSequentialGroup()
                .addComponent(progressoBarra, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(legendaBarraRolage))
        );

        jSplitPane1.setRightComponent(painelDireita);

        fileMenu.setText("File");

        fileMenuItem.setText("File");
        fileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(fileMenuItem);

        jMenuBar1.add(fileMenu);

        helpMenu.setText("Help");
        helpMenu.setToolTipText("");

        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1348, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public String[] parseListString2Array(ListModel<String> lista) {
        String[] convertida = new String[lista.getSize()];
        for (int i = 0; i < convertida.length; i++) {
            convertida[i] = lista.getElementAt(i);
        }
        return convertida;
    }

    private void botaoGerarVisualizacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGerarVisualizacaoActionPerformed
        limparPainelEsquerda();
        itemTamanho = tamanhoTreeampComboBox.getSelectedItem().toString();
        itemLegenda = legendaComboBox.getSelectedItem().toString();
        itemCor = corTreemapComboBox.getSelectedItem().toString();
        String[] itensHierarquia = parseListString2Array(colunasHierarquicasList2.getModel());

        VisualizationsArea v = new VisualizationsArea(painelEsquerda.getWidth(), painelEsquerda.getHeight(),
                manipulador, itemTamanho, itensHierarquia, itemLegenda);

        painelEsquerda.add(layerPane);
        view = v.getView();
        layerPane.setBounds(view.getBounds());
        layerPane.add(view, new Integer(0), 0);

        progressoBarra.setVisible(false);
        atualizarLegendaTreemap(itemTamanho, itemLegenda, itemCor);
    }//GEN-LAST:event_botaoGerarVisualizacaoActionPerformed

    private void checkLegendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkLegendaActionPerformed
        if (checkLegenda.isSelected()) {
            Constantes.setShowLegenda(true);
            legendaComboBox.setEnabled(true);
        } else {
            Constantes.setShowLegenda(false);
            legendaComboBox.setEnabled(false);
        }
    }//GEN-LAST:event_checkLegendaActionPerformed

    private void checkGlyphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkGlyphActionPerformed
        if (checkGlyph.isSelected()) {
            Constantes.setShowGlyph(true);
            glyphPanel = new GlassPanel();
            glyphPanel.setTMView(view);

            atributo1Glyph.setEnabled(true);
            botaoGerarGlyphs.setEnabled(true);
            layerPane.add(glyphPanel, new Integer(1), 0);
        } else {
            Constantes.setShowGlyph(false);
            botaoGerarGlyphs.setEnabled(false);
            glyphPanel.setVisible(false);
            layerPane.remove(glyphPanel);
        }
    }//GEN-LAST:event_checkGlyphActionPerformed

    private void fileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "TXT & CSV Files", "txt", "csv");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            selectedFile = chooser.getSelectedFile();

            progressoBarra.setVisible(true);
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            //Instances of javax.swing.SwingWorker are not reusuable, so
            //we create new instances as needed.
            task = new Task();
            task.addPropertyChangeListener(this);
            task.execute();
        }
    }//GEN-LAST:event_fileMenuItemActionPerformed

    private void inserirBotao_treemapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirBotao_treemapActionPerformed
        List<Object> newListaAtribTreemap = new ArrayList<>();
        List<Object> atributosEscolhidos = new ArrayList<>();
        for (int i = 0; i < colunasHierarquicasList2.getModel().getSize(); i++) {
            String elementAt = colunasHierarquicasList2.getModel().getElementAt(i);
            atributosEscolhidos.add(elementAt);
        }
        atributosEscolhidos.addAll(colunasHierarquicasList.getSelectedValuesList());
        atributosEscolhidos.sort(null);
        loadVariaveisEscolhidasTreemap(atributosEscolhidos.toArray());
        colunasHierarquicasList2.setEnabled(true);
        botaoGerarVisualizacao.setEnabled(true);

        //remover o conteudo da lista de atributos original
        ListModel<String> modelOriginal = colunasHierarquicasList.getModel();
        List<String> selectedValuesList = colunasHierarquicasList.getSelectedValuesList();
        for (int i = 0; i < modelOriginal.getSize(); i++) {
            if (!selectedValuesList.contains(modelOriginal.getElementAt(i))) {
                newListaAtribTreemap.add(modelOriginal.getElementAt(i));
            }
        }
        loadItensHierarquiaTreemap(newListaAtribTreemap.toArray());
    }//GEN-LAST:event_inserirBotao_treemapActionPerformed

    private void removerBotao_treemapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerBotao_treemapActionPerformed
        List<Object> newListaAtribTreemap = new ArrayList<>();
        List<Object> atributos = new ArrayList<>();

        for (int i = 0; i < colunasHierarquicasList.getModel().getSize(); i++) {
            String elementAt = colunasHierarquicasList.getModel().getElementAt(i);
            atributos.add(elementAt);
        }
        atributos.addAll(colunasHierarquicasList2.getSelectedValuesList());
        atributos.sort(null);
        loadItensHierarquiaTreemap(atributos.toArray());

        //remover o conteudo da lista de hierarquia treemap
        ListModel<String> modelGlyphs = colunasHierarquicasList2.getModel();
        List<String> selectedValuesList = colunasHierarquicasList2.getSelectedValuesList();
        for (int i = 0; i < modelGlyphs.getSize(); i++) {
            if (!selectedValuesList.contains(modelGlyphs.getElementAt(i))) {
                newListaAtribTreemap.add(modelGlyphs.getElementAt(i));
            }
        }
        loadVariaveisEscolhidasTreemap(newListaAtribTreemap.toArray());

        if (colunasHierarquicasList2.getModel().getSize() == 0) {
            colunasHierarquicasList2.setEnabled(false);
        }
    }//GEN-LAST:event_removerBotao_treemapActionPerformed

    private void botaoGerarGlyphsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGerarGlyphsActionPerformed
        glyphPanel.setBounds(painelEsquerda.getBounds());
        glyphPanel.setManipulador(manipulador);
        ArrayList<Object> atributosEscolhidosGlyph = getAtributosEscolhidosGlyph();
        glyphPanel.setAtributosEscolhidos(atributosEscolhidosGlyph);

        glyphPanel.setVisible(true);
        glyphPanel.repaint();

        atualizarLegendaGlyphs(atributosEscolhidosGlyph);
    }//GEN-LAST:event_botaoGerarGlyphsActionPerformed

    private void colunasHierarquicasListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_colunasHierarquicasListValueChanged
        if (colunasHierarquicasList.getSelectedValuesList().size() >= 1) {
            inserirBotao_treemap.setEnabled(true);
        } else {
            inserirBotao_treemap.setEnabled(false);
        }
    }//GEN-LAST:event_colunasHierarquicasListValueChanged

    private void colunasHierarquicasList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_colunasHierarquicasList2ValueChanged
        if (colunasHierarquicasList2.getSelectedValuesList().size() >= 1) {
            removerBotao_treemap.setEnabled(true);
            if (colunasHierarquicasList2.getSelectedIndex() > 0) {
                cimaBotao_treemap.setEnabled(true);
            } else {
                cimaBotao_treemap.setEnabled(false);
            }
            if (colunasHierarquicasList2.getSelectedIndex() < colunasHierarquicasList2.getModel().getSize() - 1) {
                baixoBotao_treemap.setEnabled(true);
            } else {
                baixoBotao_treemap.setEnabled(false);
            }
        } else {
            removerBotao_treemap.setEnabled(false);
            cimaBotao_treemap.setEnabled(false);
            baixoBotao_treemap.setEnabled(false);
        }
    }//GEN-LAST:event_colunasHierarquicasList2ValueChanged

    private void atributo1GlyphItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_atributo1GlyphItemStateChanged
        getColunasCategoricas().add(0, "---");
        loadVariaveisGlyph(getColunasCategoricas().toArray(), atributo2Glyph);
        atributo2Glyph.setEnabled(true);
    }//GEN-LAST:event_atributo1GlyphItemStateChanged

    private void atributo2GlyphItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_atributo2GlyphItemStateChanged
        getColunasCategoricas().add(0, "---");
        loadVariaveisGlyph(getColunasCategoricas().toArray(), atributo3Glyph);
        atributo3Glyph.setEnabled(true);
    }//GEN-LAST:event_atributo2GlyphItemStateChanged

    private void atributo3GlyphItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_atributo3GlyphItemStateChanged
        getColunasCategoricas().add(0, "---");
        loadVariaveisGlyph(getColunasCategoricas().toArray(), atributo4Glyph);
        atributo4Glyph.setEnabled(true);
    }//GEN-LAST:event_atributo3GlyphItemStateChanged

    private void atributo4GlyphItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_atributo4GlyphItemStateChanged
        getColunasCategoricas().add(0, "---");
        loadVariaveisGlyph(getColunasCategoricas().toArray(), atributo5Glyph);
        atributo5Glyph.setEnabled(true);
    }//GEN-LAST:event_atributo4GlyphItemStateChanged

    private void cimaBotao_treemapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cimaBotao_treemapActionPerformed
        List<String> novaLista = new ArrayList<>();
        int[] selectedValuesList = colunasHierarquicasList2.getSelectedIndices();
        for (int i = 0; i < colunasHierarquicasList2.getModel().getSize(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    novaLista.add(i - 1, colunasHierarquicasList2.getModel().getElementAt(i));
                } else {
                    novaLista.add(colunasHierarquicasList2.getModel().getElementAt(i));
                }
            }
        }
        loadVariaveisEscolhidasTreemap(novaLista.toArray());
    }//GEN-LAST:event_cimaBotao_treemapActionPerformed

    private void baixoBotao_treemapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baixoBotao_treemapActionPerformed
        List<String> novaLista = new ArrayList<>(colunasHierarquicasList2.getModel().getSize());
        for (int i = 0; i < colunasHierarquicasList2.getModel().getSize(); i++) {
            novaLista.add(colunasHierarquicasList2.getModel().getElementAt(i));
        }
        int[] selectedValuesList = colunasHierarquicasList2.getSelectedIndices();
        for (int i = 0; i < novaLista.size(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    String caraFrente = novaLista.get(i + 1);
                    String caraAtual = novaLista.get(i);
                    novaLista.add(i + 1, caraAtual);
                    novaLista.add(i, caraFrente);
                    novaLista.remove(i + 2);
                    novaLista.remove(i + 2);
                    break;
                }
            }
        }
        loadVariaveisEscolhidasTreemap(novaLista.toArray());
    }//GEN-LAST:event_baixoBotao_treemapActionPerformed

    private ArrayList<Object> getAtributosEscolhidosGlyph() {
        ArrayList<Object> atributosEscolhidosGlyph = new ArrayList<>();
        atributosEscolhidosGlyph.add(atributo1Glyph.getSelectedItem());
        atributosEscolhidosGlyph.add(atributo2Glyph.getSelectedItem());
        atributosEscolhidosGlyph.add(atributo3Glyph.getSelectedItem());
        atributosEscolhidosGlyph.add(atributo4Glyph.getSelectedItem());
        atributosEscolhidosGlyph.add(atributo5Glyph.getSelectedItem());
        return atributosEscolhidosGlyph;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                frame = new Main();
                frame.setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JComboBox<String> atributo1Glyph;
    private javax.swing.JComboBox<String> atributo2Glyph;
    private javax.swing.JComboBox<String> atributo3Glyph;
    private javax.swing.JComboBox<String> atributo4Glyph;
    private javax.swing.JComboBox<String> atributo5Glyph;
    private javax.swing.JButton baixoBotao_treemap;
    private javax.swing.JButton botaoGerarGlyphs;
    private javax.swing.JButton botaoGerarVisualizacao;
    private javax.swing.JCheckBox checkGlyph;
    private javax.swing.JCheckBox checkLegenda;
    private javax.swing.JButton cimaBotao_treemap;
    private javax.swing.JList<String> colunasHierarquicasList;
    private javax.swing.JList<String> colunasHierarquicasList2;
    private javax.swing.JComboBox<String> corTreemapComboBox;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton inserirBotao_treemap;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JScrollPane legendaBarraRolage;
    private javax.swing.JComboBox<String> legendaComboBox;
    private javax.swing.JPanel painelDireita;
    private javax.swing.JPanel painelEsquerda;
    private javax.swing.JPanel painelLegendaVis;
    private javax.swing.JProgressBar progressoBarra;
    private javax.swing.JButton removerBotao_treemap;
    private javax.swing.JComboBox<String> tamanhoTreeampComboBox;
    // End of variables declaration//GEN-END:variables
    static Main frame;
    private JLayeredPane layerPane;
    private GlassPanel glyphPanel;
    private LegendaVisualizacao legendaVisualizacao;
    private String itemTamanho;
    private String itemLegenda;
    private String itemCor;
    private TMView view;

    private ManipuladorArquivo manipulador;
    private File selectedFile;
    private Task task;

    private void atualizarLegendaGlyphs(ArrayList<Object> atributosEscolhidosGlyph) {
        painelLegendaVis.removeAll();
        atualizarLegendaTreemap(itemTamanho, itemLegenda, itemCor);
        legendaVisualizacao.setAtributosGlyphs(atributosEscolhidosGlyph);
        for (int i = 0; i < atributosEscolhidosGlyph.size(); i++) {
            if (!atributosEscolhidosGlyph.get(i).equals("---")) {
                JPanel painelDimensao = legendaVisualizacao.addLegendaDimensao(i);
                painelLegendaVis.add(painelDimensao);
            }
            painelLegendaVis.revalidate();
        }
    }

    private void atualizarLegendaTreemap(String itemTamanho, String itemLegenda, String itemCor) {
        painelLegendaVis.removeAll();
//        JPanel painelDimensao = legendaVisualizacao.addLegendaCor(itemCor);
//        painelLegendaVis.add(painelDimensao);
    }

    class Task extends SwingWorker<Void, Void> {

        /*
         * Main task. Executed in background thread.
         */
        @Override
        public Void doInBackground() {
            int progress = 0;
            //Initialize progress property.
            setProgress(0);
            int ordem = 0;
            while (progress < 100) {
                //Sleep for up to one second.
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ignore) {
                    ignore.printStackTrace();
                }
                //Make progress.     
                ordem++;
                progress = executaTarefas(ordem, progress);
                setProgress(Math.min(progress, 100));
            }
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {
            Toolkit.getDefaultToolkit().beep();
            setCursor(null); //turn off the wait cursor
        }
    }

    private int executaTarefas(int ordem, int porcentagem) {
        int tarefas = 8;
        switch (ordem) {
            case 1:
                manipulador = new ManipuladorArquivo();
                manipulador.lerArquivo(selectedFile);
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Tratando arquivo: "+porcentagem+"%");
                break;
            case 2:
                try {
                    manipulador.montarColunas(manipulador.getCabecalho(), manipulador.getTipos());
                } catch (Exception e) {
                    e.printStackTrace();
                }
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Montando colunas: "+porcentagem+"%");
                break;
            case 3:
                try {
                    manipulador.carregarItensTreemap();
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando itens no TreeMap: "+porcentagem+"%");
                break;
            case 4:
                try {
                    for (int i = 0; i < manipulador.getColunas().length; i++) {
                        Coluna c = manipulador.getColunas()[i];
                        c.configurarDescricao(manipulador.getDadosColuna(manipulador.getCabecalho()[i]));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Definindo a descrição das colunas: "+porcentagem+"%");
                break;
            case 5:
                loadItensTamanhoTreemap();
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Preparando lista tamanho: "+porcentagem+"%");
                break;
            case 6:
                loadItensLegendaTreemap();
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Preparando lista legenda: "+porcentagem+"%");
                break;
            case 7:
                loadVariaveisGlyph(getColunasCategoricas().toArray(), atributo1Glyph);
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando variáveis glyph: "+porcentagem+"%");
                break;
            case 8:
                loadItensHierarquiaTreemap(getColunasCategoricas().toArray());
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando variáveis hierarquia Treemap: "+porcentagem+"%");
                break;
            default:
                throw new AssertionError();
        }
        return porcentagem;
    }

    private void limparPainelEsquerda() {
        painelEsquerda.removeAll();
        painelEsquerda.repaint();
    }

    private void loadItensTamanhoTreemap() {
        List<String> itens = new ArrayList<>();
        for (String cabecalho : manipulador.getCabecalho()) {
            String tipo = manipulador.getMapaCabecalho().get(cabecalho);
            if (tipo.equalsIgnoreCase(Metadados.TipoDados.Integer.name())) {
                itens.add(cabecalho);
            }
        }
        atualizarComboBox(tamanhoTreeampComboBox, itens);
        tamanhoTreeampComboBox.setEnabled(true);
    }

    private void loadItensLegendaTreemap() {
        List<String> itens = new ArrayList<>();
        itens.addAll(Arrays.asList(manipulador.getCabecalho()));
        itens.remove(manipulador.getCabecalho().length - 1);
        atualizarComboBox(legendaComboBox, itens);
        botaoGerarVisualizacao.setEnabled(true);
    }

    private void loadItensHierarquiaTreemap(Object[] objs) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        colunasHierarquicasList.setModel(model);
        colunasHierarquicasList.setEnabled(true);
    }

    private List<String> getColunasCategoricas() {
        List<String> list = new ArrayList<>();
        for (int i = 0; i < manipulador.getColunas().length - 1; i++) {
            Coluna c = manipulador.getColunas()[i];
            if (c.getDescription().equals(Metadados.Descricao.CATEGORICAL)) {
                list.add(c.getName());
            }
        }
        return list;
    }

    private void atualizarComboBox(JComboBox comboBox, List<String> itens) {
        Object[] items = itens.toArray();
        DefaultComboBoxModel model = new DefaultComboBoxModel(items);
        comboBox.setModel(model);
    }

    private void loadVariaveisGlyph(Object[] objs, JComboBox<String> atributo) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        atributo.setModel(model);
    }

    private void loadVariaveisEscolhidasGlyph(Object[] objs) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
//        variaveisGlyphList2.setModel(model);
    }

    private void loadVariaveisEscolhidasTreemap(Object[] objs) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        colunasHierarquicasList2.setModel(model);
    }

//    private void loadVariaveisStarGlyph() {
//        List<String> itens = new ArrayList<>();
//        for (String cabecalho : manipulador.getCabecalho()) {
//            String tipo = manipulador.getMapaCabecalho().get(cabecalho);
//            if (tipo.equalsIgnoreCase(Metadados.TipoDados.Integer.name())
//                    || tipo.equalsIgnoreCase(Metadados.TipoDados.Double.name())) {
//                itens.add(cabecalho);
//            }
//        }
//        Object[] items = itens.toArray();
//        DefaultComboBoxModel model = new DefaultComboBoxModel(items);
//        variaveisGlyphList.setModel(model);
//    }
    private void appendToPane(JTextPane tp, String msg, Color c) {
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        int len = tp.getDocument().getLength();
        tp.setCaretPosition(len);
        tp.setCharacterAttributes(aset, false);
        tp.replaceSelection(msg);
    }

//    private void prepararLegendaStarGlyph(List<String> itensVariaveisStarGlyph) {
//        painelLegenda.setEditable(true);
//        painelLegenda.setText("");
//        for (int i = 0; i < itensVariaveisStarGlyph.size(); i++) {
//            appendToPane(painelLegenda, itensVariaveisStarGlyph.get(i) + "\n", Color.decode(Constantes.getCor()[i]));
//        }
//        painelLegenda.setEditable(false);
//    }
    /**
     * Invoked when task's progress property changes.
     */
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (Constantes.PROGRESS == evt.getPropertyName()) {
            int progress = (Integer) evt.getNewValue();
            progressoBarra.setValue(progress);
        }
    }
}
